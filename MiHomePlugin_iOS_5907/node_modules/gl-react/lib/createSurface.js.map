{"version":3,"sources":["../src/createSurface.js"],"names":[],"mappings":"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","file":"createSurface.js","sourcesContent":["const React = require(\"react\");\nconst {\n  Component,\n  PropTypes\n} = React;\nconst invariant = require(\"invariant\");\nconst { fill, resolve, build } = require(\"./data\");\nconst Shaders = require(\"./Shaders\");\nconst Node = require(\"./Node\");\nconst postShader = require(\"./postShader\");\nconst findGLNodeInGLComponentChildren = require(\"./data/findGLNodeInGLComponentChildren\");\nconst invariantStrictPositive = require(\"./data/invariantStrictPositive\");\nconst AnimatedData = require(\"./AnimatedData\");\nconst runtime = require(\"./runtime\");\n\nlet _glSurfaceId = 1;\n\nfunction logResult (data, contentsVDOM) {\n  if (typeof console !== \"undefined\" &&\n    console.debug // eslint-disable-line\n  ) {\n    console.debug(\"GL.Surface rendered with\", data, contentsVDOM); // eslint-disable-line no-console\n  }\n}\n\nmodule.exports = (\n  renderVcontainer,\n  renderVcontent,\n  renderVGL,\n  getPixelRatio,\n  getGLCanvas = glSurface => glSurface.refs.canvas,\n) => {\n\n  class GLSurface extends Component {\n    constructor (props, context) {\n      super(props, context);\n      this._renderId = 0;\n      this._id = _glSurfaceId ++;\n    }\n\n    componentWillMount () {\n      Shaders._onSurfaceWillMount(this._id);\n      this._build(this.props);\n      this._attach();\n    }\n\n    componentWillUnmount () {\n      this._renderId = 0;\n      Shaders._onSurfaceWillUnmount(this._id);\n      this._dataAnimated && this._dataAnimated.__detach();\n    }\n\n    componentWillReceiveProps (nextProps) {\n      this._build(nextProps);\n      this._attach();\n    }\n\n    _build (props) {\n      const id = this._id;\n      const renderId = ++this._renderId;\n      const {\n        width,\n        height,\n        pixelRatio: pixelRatioProps,\n        children,\n        debug,\n        preload\n      } = props;\n\n      invariant(children, \"GL.Surface must have in children a GL.Node or a GL Component\");\n\n      const decorateOnShaderCompile = onShaderCompile =>\n      onShaderCompile && // only decorated if onShaderCompile is defined\n      ((error, result) =>\n        renderId === this._renderId && // it's outdated. skip the callback call\n        onShaderCompile(error, result)); // it's current. propagate the call\n\n      const pixelRatio = pixelRatioProps || getPixelRatio(props);\n\n      invariantStrictPositive(pixelRatio, \"GL.Surface: pixelRatio prop\");\n\n      const surfaceContext = {\n        width,\n        height,\n        pixelRatio\n      };\n\n      const glNode = findGLNodeInGLComponentChildren(\n        <Node\n          shader={postShader}\n          {...surfaceContext}\n          uniforms={{ t: children }}\n        />,\n        surfaceContext);\n\n      invariant(glNode && glNode.childGLNode, \"GL.Surface must have in children a GL.Node or a GL Component\");\n\n      const { via, childGLNode, context } = glNode;\n\n      let resolved;\n      try {\n        Shaders._beforeSurfaceBuild(id);\n        resolved =\n          resolve(\n            fill(\n              build(\n                childGLNode,\n                context,\n                preload,\n                via,\n                id,\n                decorateOnShaderCompile\n              )));\n      }\n      catch (e) {\n        throw e;\n      }\n      finally {\n        Shaders._afterSurfaceBuild(id);\n      }\n\n      this._resolved = resolved;\n      this._pixelRatio = pixelRatio;\n\n      if (debug) logResult(resolved.data, resolved.contentsVDOM);\n    }\n\n    _attach () {\n      const oldDataAnimated = this._dataAnimated;\n      const callback = () => {\n        const canvas = this.getGLCanvas();\n        if (!canvas) return;\n        if (canvas.setNativeProps) {\n          const data = this._dataAnimated.__getValue();\n          canvas.setNativeProps({ data });\n        }\n        else {\n          this.forceUpdate();\n        }\n      };\n      this._dataAnimated = new AnimatedData(\n        this._resolved.data,\n        callback);\n\n      oldDataAnimated && oldDataAnimated.__detach();\n    }\n\n    getGLCanvas () {\n      return getGLCanvas(this);\n    }\n\n    captureFrame () {\n      const c = this.getGLCanvas();\n      invariant(c, \"c is '%s'. Is the component unmounted?\", c);\n      invariant(c.captureFrame, \"captureFrame() should be implemented by GLCanvas\");\n      return c.captureFrame.apply(c, arguments);\n    }\n\n    render() {\n      const renderId = this._renderId;\n      const { contentsVDOM, imagesToPreload } = this._resolved;\n      const data = this._dataAnimated.__getValue();\n      const pixelRatio = this._pixelRatio;\n      const props = this.props;\n      const {\n        children, debug, preload, // eslint-disable-line no-unused-vars\n        style,\n        width,\n        height,\n        backgroundColor,\n        visibleContent,\n        eventsThrough,\n        ...restProps\n      } = props;\n\n      return renderVcontainer(\n        { width, height, style, visibleContent, eventsThrough },\n        contentsVDOM.map((vdom, i) =>\n          renderVcontent(data.width, data.height, i, runtime.decorateVDOMContent(vdom), { visibleContent })),\n        renderVGL({\n          ...restProps, // eslint-disable-line no-undef\n          style: { backgroundColor },\n          width,\n          height,\n          pixelRatio,\n          data,\n          nbContentTextures: contentsVDOM.length,\n          imagesToPreload,\n          renderId,\n          visibleContent,\n          eventsThrough\n        })\n      );\n    }\n  }\n\n  GLSurface.displayName = \"GL.Surface\";\n\n  GLSurface.propTypes = {\n    width: PropTypes.any.isRequired,\n    height: PropTypes.any.isRequired,\n    backgroundColor: PropTypes.string,\n    pixelRatio: PropTypes.number,\n    children: PropTypes.element.isRequired,\n    preload: PropTypes.bool,\n    autoRedraw: PropTypes.bool,\n    eventsThrough: PropTypes.bool,\n    visibleContent: PropTypes.bool,\n    onLoad: PropTypes.func,\n    onProgress: PropTypes.func\n  };\n\n  GLSurface.defaultProps = {\n    preload: false,\n    autoRedraw: false,\n    eventsThrough: false,\n    visibleContent: false,\n    backgroundColor: \"#000\"\n  };\n\n  return GLSurface;\n};\n"]}