{"version":3,"sources":["../../src/data/fill.js"],"names":[],"mappings":";;;;;;AAEA,SAAS,IAAT,CAAe,QAAf,EAAyB;AACvB,WAAS,OAAT,CAAkB,IAAlB,EAAwB;;AAEtB,QAAI,kBAAkB,CAAE,KAAK,IAAL,CAApB;QAAiC,sBAAsB,CAAE,KAAK,IAAL,CAAxB,CAFf;AAGtB,QAAM,cAAc,KAAK,IAAL,CAAU,QAAV,CAAmB,GAAnB,CAAuB,gBAAQ;AACjD,UAAM,MAAM,QAAQ,IAAR,CAAN,CAD2C;AAEjD,UAAI,gBAAgB,OAAhB,CAAwB,IAAI,IAAJ,CAAxB,KAAsC,CAAC,CAAD,EAAI;AAC5C,wBAAgB,IAAhB,CAAqB,IAAI,IAAJ,CAArB,CAD4C;AAE5C,4BAAoB,IAApB,CAAyB,IAAI,IAAJ,CAAzB,CAF4C;OAA9C;AAIA,UAAI,eAAJ,CAAoB,OAApB,CAA4B,UAAC,IAAD,EAAO,CAAP,EAAa;AACvC,YAAI,gBAAgB,OAAhB,CAAwB,IAAxB,MAAkC,CAAC,CAAD,EAAI;AACxC,0BAAgB,IAAhB,CAAqB,IAArB,EADwC;AAExC,8BAAoB,IAApB,CAAyB,IAAI,mBAAJ,CAAwB,CAAxB,CAAzB,EAFwC;SAA1C;OAD0B,CAA5B,CANiD;AAYjD,aAAO,GAAP,CAZiD;KAAR,CAArC,CAHgB;AAiBtB,wBACK;AACH,yBAAW,KAAK,IAAL,IAAW,UAAU,WAAV,GAAtB;AACA;AACA;MAJF,CAjBsB;GAAxB;AAwBA,SAAO,QAAQ,EAAE,MAAM,QAAN,EAAV,EAA4B,IAA5B,CAzBgB;CAAzB;;AA4BA,OAAO,OAAP,GAAiB,IAAjB","file":"fill.js","sourcesContent":["// fill the result of build() with more information that will make resolve() more efficient\n\nfunction fill (dataTree) {\n  function fillRec (node) {\n    // we compute all the descendants vdom under the current node\n    let descendantsVDOM = [ node.vdom ], descendantsVDOMData = [ node.data ];\n    const newChildren = node.data.children.map(node => {\n      const res = fillRec(node);\n      if (descendantsVDOM.indexOf(res.vdom) === -1) {\n        descendantsVDOM.push(res.vdom);\n        descendantsVDOMData.push(res.data);\n      }\n      res.descendantsVDOM.forEach((vdom, i) => {\n        if (descendantsVDOM.indexOf(vdom) === -1) {\n          descendantsVDOM.push(vdom);\n          descendantsVDOMData.push(res.descendantsVDOMData[i]);\n        }\n      });\n      return res;\n    });\n    return {\n      ...node,\n      data: { ...node.data, children: newChildren },\n      descendantsVDOM,\n      descendantsVDOMData\n    };\n  }\n  return fillRec({ data: dataTree }).data;\n}\n\nmodule.exports = fill;\n"]}