/**
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 */
'use strict';

const presetModuleList = [
"node_modules/react-native/packager/react-packager/src/Resolver/polyfills/prelude.js",
"node_modules/react-native/packager/react-packager/src/Resolver/polyfills/require.js",
"node_modules/react-native/packager/react-packager/src/Resolver/polyfills/polyfills.js",
"node_modules/react-native/packager/react-packager/src/Resolver/polyfills/console.js",
"node_modules/react-native/packager/react-packager/src/Resolver/polyfills/error-guard.js",
"node_modules/react-native/packager/react-packager/src/Resolver/polyfills/String.prototype.es6.js",
"node_modules/react-native/packager/react-packager/src/Resolver/polyfills/Array.prototype.es6.js",
"node_modules/react-native/packager/react-packager/src/Resolver/polyfills/Array.es6.js",
"node_modules/react-native/packager/react-packager/src/Resolver/polyfills/Object.es7.js",
"node_modules/react-native/packager/react-packager/src/Resolver/polyfills/babelHelpers.js",
"node_modules/react-native/Libraries/react-native/react-native.js",
"node_modules/react-native/Libraries/Components/ActivityIndicatorIOS/ActivityIndicatorIOS.ios.js",
"node_modules/react-native/Libraries/ReactIOS/NativeMethodsMixin.js",
"node_modules/react-native/Libraries/ReactNative/ReactNativeAttributePayload.js",
"node_modules/react-native/Libraries/Utilities/Platform.ios.js",
"node_modules/react-native/Libraries/ReactNative/ReactNativePropRegistry.js",
"node_modules/react-native/Libraries/Utilities/differ/deepDiffer.js",
"node_modules/react-native/Libraries/StyleSheet/flattenStyle.js",
"node_modules/fbjs/lib/invariant.js",
"node_modules/react-native/Libraries/Components/TextInput/TextInputState.js",
"node_modules/react-native/Libraries/Utilities/UIManager.js",
"node_modules/react-native/Libraries/BatchedBridge/BatchedBridgedModules/NativeModules.js",
"node_modules/react-native/Libraries/BatchedBridge/BatchedBridge.js",
"node_modules/react-native/Libraries/Utilities/MessageQueue.js",
"node_modules/react-native/Libraries/Utilities/Systrace.js",
"node_modules/react/lib/ReactPerf.js",
"node_modules/react-native/Libraries/Utilities/ErrorUtils.js",
"node_modules/react-native/Libraries/JavaScriptAppEngine/System/JSTimers/JSTimersExecution.js",
"node_modules/fbjs/lib/keyMirror.js",
"node_modules/fbjs/lib/performanceNow.js",
"node_modules/fbjs/lib/performance.js",
"node_modules/fbjs/lib/ExecutionEnvironment.js",
"node_modules/fbjs/lib/warning.js",
"node_modules/fbjs/lib/emptyFunction.js",
"node_modules/react-native/Libraries/JavaScriptAppEngine/System/JSTimers/JSTimers.js",
"node_modules/react-native/Libraries/Utilities/stringifySafe.js",
"node_modules/react-native/Libraries/ReactNative/findNodeHandle.js",
"node_modules/react/lib/ReactCurrentOwner.js",
"node_modules/react/lib/ReactInstanceMap.js",
"node_modules/react-native/Libraries/ReactNative/ReactNativeTagHandles.js",
"node_modules/react/lib/ReactPropTypes.js",
"node_modules/react/lib/ReactElement.js",
"node_modules/react/lib/Object.assign.js",
"node_modules/react/lib/canDefineProperty.js",
"node_modules/react/lib/ReactPropTypeLocationNames.js",
"node_modules/react/node_modules/fbjs/lib/emptyFunction.js",
"node_modules/react/lib/getIteratorFn.js",
"node_modules/react-native/Libraries/ReactNative/React.js",
"node_modules/react-native/Libraries/ReactNative/ReactNative.js",
"node_modules/react-native/Libraries/ReactNative/ReactNativeDefaultInjection.js",
"node_modules/react-native/Libraries/JavaScriptAppEngine/Initialization/InitializeJavaScriptAppEngine.js",
"node_modules/regenerator/runtime.js",
"node_modules/react-native/Libraries/JavaScriptAppEngine/Initialization/ExceptionsManager.js",
"node_modules/react-native/Libraries/JavaScriptAppEngine/Initialization/parseErrorStack.js",
"node_modules/stacktrace-parser/index.js",
"node_modules/stacktrace-parser/lib/stacktrace-parser.js",
"node_modules/react-native/Libraries/Utilities/Alert.js",
"node_modules/react-native/Libraries/Utilities/AlertIOS.js",
"node_modules/react-native/Libraries/Promise.js",
"node_modules/fbjs/lib/Promise.native.js",
"node_modules/promise/setimmediate/es6-extensions.js",
"node_modules/promise/setimmediate/core.js",
"node_modules/promise/setimmediate/done.js",
"node_modules/react-native/Libraries/Network/XMLHttpRequest.ios.js",
"node_modules/react-native/Libraries/Network/FormData.js",
"node_modules/react-native/Libraries/Network/RCTNetworking.ios.js",
"node_modules/react-native/Libraries/Network/XMLHttpRequestBase.js",
"node_modules/react-native/Libraries/Device/RCTDeviceEventEmitter.js",
"node_modules/react-native/Libraries/vendor/emitter/EventEmitter.js",
"node_modules/react-native/Libraries/vendor/emitter/EmitterSubscription.js",
"node_modules/react-native/Libraries/vendor/emitter/EventSubscription.js",
"node_modules/react-native/Libraries/vendor/emitter/EventSubscriptionVendor.js",
"node_modules/react-native/Libraries/Utilities/utf8.js",
"node_modules/react-native/Libraries/Fetch/fetch.js",
"node_modules/react-native/Libraries/Geolocation/Geolocation.js",
"node_modules/react-native/Libraries/Utilities/logError.js",
"node_modules/react-native/Libraries/vendor/core/Map.js",
"node_modules/react-native/Libraries/vendor/core/guid.js",
"node_modules/fbjs/lib/isNode.js",
"node_modules/react-native/Libraries/vendor/core/toIterator.js",
"node_modules/react-native/Libraries/vendor/core/_shouldPolyfillES6Collection.js",
"node_modules/react-native/Libraries/vendor/core/Set.js",
"node_modules/react-native/Libraries/WebSocket/WebSocket.js",
"node_modules/react-native/Libraries/WebSocket/WebSocketBase.js",
"node_modules/event-target-shim/lib/event-target.js",
"node_modules/event-target-shim/lib/commons.js",
"node_modules/event-target-shim/lib/custom-event-target.js",
"node_modules/event-target-shim/lib/event-wrapper.js",
"node_modules/react-native/Libraries/WebSocket/WebSocketEvent.js",
"node_modules/base64-js/lib/b64.js",
"node_modules/react-native/Libraries/NativeApp/RCTNativeAppEventEmitter.js",
"node_modules/react-native/Libraries/Utilities/PerformanceLogger.js",
"node_modules/react/lib/EventPluginHub.js",
"node_modules/react/lib/EventPluginRegistry.js",
"node_modules/react/node_modules/fbjs/lib/invariant.js",
"node_modules/react/lib/EventPluginUtils.js",
"node_modules/react/lib/EventConstants.js",
"node_modules/react/node_modules/fbjs/lib/keyMirror.js",
"node_modules/react/lib/ReactErrorUtils.js",
"node_modules/react/node_modules/fbjs/lib/warning.js",
"node_modules/react/lib/accumulateInto.js",
"node_modules/react/lib/forEachAccumulated.js",
"node_modules/react-native/Libraries/ReactIOS/IOSDefaultEventPluginOrder.js",
"node_modules/react-native/Libraries/ReactIOS/IOSNativeBridgeEventPlugin.js",
"node_modules/react/lib/EventPropagators.js",
"node_modules/react/lib/SyntheticEvent.js",
"node_modules/react/lib/PooledClass.js",
"node_modules/react-native/Libraries/vendor/core/merge.js",
"node_modules/react-native/Libraries/vendor/core/mergeInto.js",
"node_modules/react-native/Libraries/vendor/core/mergeHelpers.js",
"node_modules/react-native/Libraries/vendor/react/platform/NodeHandle.js",
"node_modules/react/lib/ReactComponentEnvironment.js",
"node_modules/react/lib/ReactDefaultBatchingStrategy.js",
"node_modules/react/lib/ReactUpdates.js",
"node_modules/react/lib/CallbackQueue.js",
"node_modules/react/lib/ReactReconciler.js",
"node_modules/react/lib/ReactRef.js",
"node_modules/react/lib/ReactOwner.js",
"node_modules/react/lib/Transaction.js",
"node_modules/react/lib/ReactEmptyComponent.js",
"node_modules/react/lib/ReactEmptyComponentRegistry.js",
"node_modules/react/lib/ReactInstanceHandles.js",
"node_modules/react/lib/ReactRootIndex.js",
"node_modules/react-native/Libraries/ReactNative/ReactNativeBaseComponentEnvironment.js",
"node_modules/react-native/Libraries/ReactNative/ReactNativeDOMIDOperations.js",
"node_modules/react/lib/ReactMultiChildUpdateTypes.js",
"node_modules/react-native/Libraries/ReactNative/ReactNativeReconcileTransaction.js",
"node_modules/react-native/Libraries/ReactNative/ReactNativeGlobalInteractionHandler.js",
"node_modules/react-native/Libraries/Interaction/InteractionManager.js",
"node_modules/react-native/Libraries/Interaction/TaskQueue.js",
"node_modules/react-native/Libraries/vendor/core/setImmediate.js",
"node_modules/react-native/Libraries/vendor/core/immediate/setImmediate.js",
"node_modules/react-native/Libraries/ReactNative/ReactNativeGlobalResponderHandler.js",
"node_modules/react-native/Libraries/ReactNative/ReactNativeMount.js",
"node_modules/react/lib/ReactUpdateQueue.js",
"node_modules/fbjs/lib/emptyObject.js",
"node_modules/react/lib/instantiateReactComponent.js",
"node_modules/react/lib/ReactCompositeComponent.js",
"node_modules/react/lib/ReactPropTypeLocations.js",
"node_modules/react/node_modules/fbjs/lib/emptyObject.js",
"node_modules/react/lib/shouldUpdateReactComponent.js",
"node_modules/react/lib/ReactNativeComponent.js",
"node_modules/react-native/Libraries/ReactNative/ReactNativeTextComponent.js",
"node_modules/react/lib/ResponderEventPlugin.js",
"node_modules/react/lib/ResponderSyntheticEvent.js",
"node_modules/react/lib/ResponderTouchHistoryStore.js",
"node_modules/react/lib/accumulate.js",
"node_modules/react/node_modules/fbjs/lib/keyOf.js",
"node_modules/react-native/Libraries/vendor/react/platformImplementations/universal/worker/UniversalWorkerNodeHandle.js",
"node_modules/react-native/Libraries/BatchedBridge/BatchedBridgedModules/RCTEventEmitter.js",
"node_modules/react-native/Libraries/ReactNative/ReactNativeEventEmitter.js",
"node_modules/react/lib/ReactEventEmitterMixin.js",
"node_modules/react-native/Libraries/Utilities/RCTLog.js",
"node_modules/react-native/Libraries/Components/View/View.js",
"node_modules/react-native/Libraries/StyleSheet/EdgeInsetsPropType.js",
"node_modules/react-native/Libraries/Utilities/createStrictShapeTypeChecker.js",
"node_modules/react-native/Libraries/Components/View/ReactNativeStyleAttributes.js",
"node_modules/react-native/Libraries/Image/ImageStylePropTypes.js",
"node_modules/react-native/Libraries/Image/ImageResizeMode.js",
"node_modules/react-native/Libraries/StyleSheet/LayoutPropTypes.js",
"node_modules/react-native/Libraries/StyleSheet/ColorPropType.js",
"node_modules/react-native/Libraries/StyleSheet/normalizeColor.js",
"node_modules/react-native/Libraries/Components/View/ShadowPropTypesIOS.js",
"node_modules/react-native/Libraries/StyleSheet/TransformPropTypes.js",
"node_modules/react-native/Libraries/Utilities/deprecatedPropType.js",
"node_modules/react-native/Libraries/Text/TextStylePropTypes.js",
"node_modules/react-native/Libraries/Components/View/ViewStylePropTypes.js",
"node_modules/react-native/Libraries/Utilities/differ/matricesDiffer.js",
"node_modules/react-native/Libraries/StyleSheet/processColor.js",
"node_modules/react-native/Libraries/StyleSheet/processTransform.js",
"node_modules/react-native/Libraries/Utilities/MatrixMath.js",
"node_modules/react-native/Libraries/Utilities/differ/sizesDiffer.js",
"node_modules/react-native/Libraries/Components/View/ReactNativeViewAttributes.js",
"node_modules/react-native/Libraries/StyleSheet/StyleSheetPropType.js",
"node_modules/react-native/Libraries/ReactIOS/requireNativeComponent.js",
"node_modules/react-native/Libraries/Components/UnimplementedViews/UnimplementedView.js",
"node_modules/react-native/Libraries/StyleSheet/StyleSheet.js",
"node_modules/react-native/Libraries/Utilities/PixelRatio.js",
"node_modules/react-native/Libraries/Utilities/Dimensions.js",
"node_modules/react-native/Libraries/StyleSheet/StyleSheetValidation.js",
"node_modules/react-native/Libraries/ReactNative/createReactNativeComponentClass.js",
"node_modules/react-native/Libraries/ReactNative/ReactNativeBaseComponent.js",
"node_modules/react/lib/ReactMultiChild.js",
"node_modules/react/lib/ReactChildReconciler.js",
"node_modules/react/lib/traverseAllChildren.js",
"node_modules/react/lib/flattenChildren.js",
"node_modules/react-native/Libraries/Utilities/deepFreezeAndThrowOnMutationInDev.js",
"node_modules/react-native/Libraries/Utilities/differ/insetsDiffer.js",
"node_modules/react-native/Libraries/Utilities/differ/pointsDiffer.js",
"node_modules/react-native/Libraries/Image/resolveAssetSource.js",
"node_modules/react-native/Libraries/Image/AssetRegistry.js",
"node_modules/react-native/Libraries/Image/AssetSourceResolver.js",
"node_modules/react-native/local-cli/bundle/assetPathUtils.js",
"node_modules/react-native/Libraries/ReactIOS/verifyPropTypes.js",
"node_modules/react/lib/ReactChildren.js",
"node_modules/react/lib/ReactClass.js",
"node_modules/react/lib/ReactComponent.js",
"node_modules/react/lib/ReactNoopUpdateQueue.js",
"node_modules/react/lib/ReactElementValidator.js",
"node_modules/react/lib/onlyChild.js",
"node_modules/react-native/Libraries/ART/ReactNativeART.js",
"node_modules/art/core/color.js",
"node_modules/react-native/Libraries/ART/ARTSerializablePath.js",
"node_modules/art/core/class.js",
"node_modules/art/core/path.js",
"node_modules/art/core/transform.js",
"node_modules/react-native/Libraries/Components/DatePicker/DatePickerIOS.ios.js",
"node_modules/react-native/Libraries/Components/DrawerAndroid/DrawerLayoutAndroid.ios.js",
"node_modules/react-native/Libraries/Image/Image.ios.js",
"node_modules/react-native/Libraries/Image/ImageEditor.js",
"node_modules/react-native/Libraries/Image/ImageStore.js",
"node_modules/react-native/Libraries/CustomComponents/ListView/ListView.js",
"node_modules/react-native/Libraries/CustomComponents/ListView/ListViewDataSource.js",
"node_modules/react-native/Libraries/vendor/core/isEmpty.js",
"node_modules/react-native/Libraries/Components/ScrollView/ScrollView.js",
"node_modules/react-native/Libraries/StyleSheet/PointPropType.js",
"node_modules/react-native/Libraries/Components/ScrollResponder.js",
"node_modules/react-native/Libraries/Components/Subscribable.js",
"node_modules/react-native/Libraries/Utilities/dismissKeyboard.js",
"node_modules/react-native/Libraries/Components/ScrollView/processDecelerationRate.js",
"node_modules/react-native/Libraries/Components/StaticRenderer.js",
"node_modules/react-timer-mixin/TimerMixin.js",
"node_modules/react-native/Libraries/Components/MapView/MapView.js",
"node_modules/react-native/Libraries/Modal/Modal.js",
"node_modules/react-native/Libraries/CustomComponents/Navigator/Navigator.js",
"node_modules/react-native/Libraries/Interaction/InteractionMixin.js",
"node_modules/react-native/Libraries/CustomComponents/Navigator/Navigation/NavigationContext.js",
"node_modules/react-native/Libraries/CustomComponents/Navigator/Navigation/NavigationEvent.js",
"node_modules/react-native/Libraries/CustomComponents/Navigator/Navigation/NavigationEventEmitter.js",
"node_modules/react-native/Libraries/CustomComponents/Navigator/Navigation/NavigationTreeNode.js",
"node_modules/immutable/dist/immutable.js",
"node_modules/react-native/Libraries/CustomComponents/Navigator/NavigatorBreadcrumbNavigationBar.js",
"node_modules/react-native/Libraries/CustomComponents/Navigator/NavigatorBreadcrumbNavigationBarStyles.ios.js",
"node_modules/react-native/Libraries/CustomComponents/Navigator/NavigatorNavigationBarStylesIOS.js",
"node_modules/react-native/Libraries/Utilities/buildStyleInterpolator.js",
"node_modules/fbjs/lib/keyOf.js",
"node_modules/react-native/Libraries/CustomComponents/Navigator/NavigatorNavigationBarStylesAndroid.js",
"node_modules/react-native/Libraries/CustomComponents/Navigator/NavigatorNavigationBar.js",
"node_modules/react-native/Libraries/CustomComponents/Navigator/NavigatorSceneConfigs.js",
"node_modules/react-native/Libraries/vendor/react/browser/eventPlugins/PanResponder.js",
"node_modules/react-native/Libraries/vendor/react/browser/eventPlugins/TouchHistoryMath.js",
"node_modules/react-native/Libraries/vendor/react/core/clamp.js",
"node_modules/rebound/rebound.js",
"node_modules/react-native/Libraries/Components/Navigation/NavigatorIOS.ios.js",
"node_modules/react-native/Libraries/Components/StaticContainer.js",
"node_modules/react-native/Libraries/Components/Picker/Picker.js",
"node_modules/react-native/Libraries/Picker/PickerIOS.ios.js",
"node_modules/react-native/Libraries/Components/Picker/PickerAndroid.ios.js",
"node_modules/react-native/Libraries/Components/ProgressBarAndroid/ProgressBarAndroid.ios.js",
"node_modules/react-native/Libraries/Components/ProgressViewIOS/ProgressViewIOS.ios.js",
"node_modules/react-native/Libraries/Components/SegmentedControlIOS/SegmentedControlIOS.ios.js",
"node_modules/react-native/Libraries/Components/Slider/Slider.js",
"node_modules/react-native/Libraries/Components/SliderIOS/SliderIOS.ios.js",
"node_modules/react-native/Libraries/RCTTest/SnapshotViewIOS.ios.js",
"node_modules/react-native/Libraries/Components/Switch/Switch.js",
"node_modules/react-native/Libraries/PullToRefresh/PullToRefreshViewAndroid.ios.js",
"node_modules/react-native/Libraries/Components/ScrollView/RecyclerViewBackedScrollView.ios.js",
"node_modules/react-native/Libraries/Components/RefreshControl/RefreshControl.js",
"node_modules/react-native/Libraries/Components/StatusBar/StatusBar.js",
"node_modules/react-native/Libraries/Components/SwitchAndroid/SwitchAndroid.ios.js",
"node_modules/react-native/Libraries/Components/SwitchIOS/SwitchIOS.ios.js",
"node_modules/react-native/Libraries/Components/TabBarIOS/TabBarIOS.ios.js",
"node_modules/react-native/Libraries/Components/TabBarIOS/TabBarItemIOS.ios.js",
"node_modules/react-native/Libraries/Text/Text.js",
"node_modules/react-native/Libraries/Components/Touchable/Touchable.js",
"node_modules/react-native/Libraries/Components/Touchable/BoundingDimensions.js",
"node_modules/react-native/Libraries/Components/Touchable/Position.js",
"node_modules/fbjs/lib/TouchEventUtils.js",
"node_modules/react-native/Libraries/RKBackendNode/queryLayoutByID.js",
"node_modules/react-native/Libraries/Components/TextInput/TextInput.js",
"node_modules/react-native/Libraries/vendor/document/selection/DocumentSelectionState.js",
"node_modules/react-native/Libraries/vendor/emitter/mixInEventEmitter.js",
"node_modules/react-native/Libraries/vendor/emitter/EventEmitterWithHolding.js",
"node_modules/react-native/Libraries/vendor/emitter/EventHolder.js",
"node_modules/react-native/Libraries/vendor/emitter/EventValidator.js",
"node_modules/react-native/Libraries/vendor/core/copyProperties.js",
"node_modules/react-native/Libraries/Components/Touchable/TouchableWithoutFeedback.js",
"node_modules/react-native/Libraries/Components/Touchable/ensurePositiveDelayProps.js",
"node_modules/react-native/Libraries/Components/ToastAndroid/ToastAndroid.ios.js",
"node_modules/react-native/Libraries/Components/ToolbarAndroid/ToolbarAndroid.ios.js",
"node_modules/react-native/Libraries/Components/Touchable/TouchableHighlight.js",
"node_modules/react-native/Libraries/Components/Touchable/ensureComponentIsNative.js",
"node_modules/react-native/Libraries/Components/Touchable/TouchableNativeFeedback.ios.js",
"node_modules/react-native/Libraries/Components/Touchable/TouchableOpacity.js",
"node_modules/react-native/Libraries/Animated/src/Animated.js",
"node_modules/react-native/Libraries/Animated/src/AnimatedImplementation.js",
"node_modules/react-native/Libraries/Animated/src/Easing.js",
"node_modules/react-native/Libraries/Animated/src/bezier.js",
"node_modules/react-native/Libraries/Animated/src/Interpolation.js",
"node_modules/react-native/Libraries/Animated/src/SpringConfig.js",
"node_modules/react-native/Libraries/Animated/src/NativeAnimatedHelper.js",
"node_modules/fbjs/lib/requestAnimationFrame.js",
"node_modules/fbjs/lib/nativeRequestAnimationFrame.js",
"node_modules/react-native/Libraries/Components/ViewPager/ViewPagerAndroid.ios.js",
"node_modules/react-native/Libraries/Components/WebView/WebView.ios.js",
"node_modules/react-native/Libraries/ActionSheetIOS/ActionSheetIOS.js",
"node_modules/react-native/Libraries/AdSupport/AdSupportIOS.js",
"node_modules/react-native/Libraries/AppRegistry/AppRegistry.js",
"node_modules/react-native/Libraries/ReactIOS/renderApplication.ios.js",
"node_modules/react-native/Libraries/AppState/AppState.js",
"node_modules/react-native/Libraries/AppStateIOS/AppStateIOS.ios.js",
"node_modules/react-native/Libraries/Storage/AsyncStorage.js",
"node_modules/react-native/Libraries/Utilities/BackAndroid.ios.js",
"node_modules/react-native/Libraries/CameraRoll/CameraRoll.js",
"node_modules/react-native/Libraries/Components/Clipboard/Clipboard.js",
"node_modules/react-native/Libraries/Utilities/deprecatedCallback.js",
"node_modules/react-native/Libraries/Components/DatePickerAndroid/DatePickerAndroid.ios.js",
"node_modules/react-native/Libraries/CameraRoll/ImagePickerIOS.js",
"node_modules/react-native/Libraries/Components/Intent/IntentAndroid.ios.js",
"node_modules/react-native/Libraries/LayoutAnimation/LayoutAnimation.js",
"node_modules/react-native/Libraries/Linking/Linking.js",
"node_modules/react-native/Libraries/LinkingIOS/LinkingIOS.js",
"node_modules/react-native/Libraries/NavigationExperimental/NavigationExperimental.js",
"node_modules/react-native/Libraries/NavigationExperimental/NavigationAnimatedView.js",
"node_modules/react-native/Libraries/NavigationExperimental/NavigationContainer.js",
"node_modules/react-native/Libraries/NavigationExperimental/NavigationRootContainer.js",
"node_modules/react-native/Libraries/NavigationExperimental/NavigationPropTypes.js",
"node_modules/react-native/Libraries/NavigationExperimental/NavigationStateUtils.js",
"node_modules/react-native/Libraries/NavigationExperimental/Reducer/NavigationScenesReducer.js",
"node_modules/react-native/Libraries/CustomComponents/NavigationExperimental/NavigationCard.js",
"node_modules/react-native/Libraries/CustomComponents/NavigationExperimental/NavigationCardStackPanResponder.js",
"node_modules/react-native/Libraries/NavigationExperimental/NavigationAbstractPanResponder.js",
"node_modules/react-native/Libraries/CustomComponents/NavigationExperimental/NavigationCardStackStyleInterpolator.js",
"node_modules/react-native/Libraries/CustomComponents/NavigationExperimental/NavigationPagerPanResponder.js",
"node_modules/react-native/Libraries/CustomComponents/NavigationExperimental/NavigationPagerStyleInterpolator.js",
"node_modules/react/lib/ReactComponentWithPureRenderMixin.js",
"node_modules/react/lib/shallowCompare.js",
"node_modules/react/node_modules/fbjs/lib/shallowEqual.js",
"node_modules/react-native/Libraries/CustomComponents/NavigationExperimental/NavigationCardStack.js",
"node_modules/react-native/Libraries/CustomComponents/NavigationExperimental/NavigationHeader.js",
"node_modules/react-native/Libraries/CustomComponents/NavigationExperimental/NavigationHeaderTitle.js",
"node_modules/react-native/Libraries/CustomComponents/NavigationExperimental/NavigationHeaderBackButton.js",
"node_modules/react-native/Libraries/CustomComponents/NavigationExperimental/assets/back-icon@1.5x.ios.png",
"node_modules/react-native/Libraries/CustomComponents/NavigationExperimental/NavigationHeaderStyleInterpolator.js",
"node_modules/react-native/Libraries/CustomComponents/NavigationExperimental/NavigationLegacyNavigator.js",
"node_modules/react-native/Libraries/CustomComponents/NavigationExperimental/NavigationAnimatedValueSubscription.js",
"node_modules/react-native/Libraries/CustomComponents/NavigationExperimental/NavigationLegacyNavigatorRouteStack.js",
"node_modules/react-native/Libraries/NavigationExperimental/Reducer/NavigationReducer.js",
"node_modules/react-native/Libraries/NavigationExperimental/Reducer/NavigationFindReducer.js",
"node_modules/react-native/Libraries/NavigationExperimental/Reducer/NavigationStackReducer.js",
"node_modules/react-native/Libraries/NavigationExperimental/Reducer/NavigationTabsReducer.js",
"node_modules/react-native/Libraries/NavigationExperimental/NavigationView.js",
"node_modules/react-native/Libraries/Network/NetInfo.js",
"node_modules/react-native/Libraries/PushNotificationIOS/PushNotificationIOS.js",
"node_modules/react-native/Libraries/Settings/Settings.ios.js",
"node_modules/react-native/Libraries/Components/StatusBar/StatusBarIOS.ios.js",
"node_modules/react-native/Libraries/Components/TimePickerAndroid/TimePickerAndroid.ios.js",
"node_modules/react-native/Libraries/Vibration/Vibration.js",
"node_modules/react-native/Libraries/Vibration/VibrationIOS.ios.js",
"node_modules/react/lib/LinkedStateMixin.js",
"node_modules/react/lib/ReactLink.js",
"node_modules/react/lib/React.native.js",
"node_modules/react/lib/ReactIsomorphic.js",
"node_modules/react/lib/ReactDOMFactories.js",
"node_modules/react/node_modules/fbjs/lib/mapObject.js",
"node_modules/react/lib/ReactVersion.js",
"node_modules/react/lib/ReactStateSetters.js",
"node_modules/react/lib/cloneWithProps.js",
"node_modules/react/lib/ReactPropTransferer.js",
"node_modules/react/node_modules/fbjs/lib/joinClasses.js",
"node_modules/react/lib/ReactFragment.js",
"node_modules/react/lib/update.js",
];

const assert = require('assert');
const fs = require('fs');
const path = require('path');
const Promise = require('promise');
const ProgressBar = require('progress');
const Cache = require('node-haste').Cache;
const Transformer = require('../JSTransformer');
const Resolver = require('../Resolver');
const Bundle = require('./Bundle');
const HMRBundle = require('./HMRBundle');
const PrepackBundle = require('./PrepackBundle');
const Activity = require('../Activity');
const ModuleTransport = require('../lib/ModuleTransport');
const declareOpts = require('../lib/declareOpts');
const imageSize = require('image-size');
const version = require('../../../../package.json').version;

const sizeOf = Promise.denodeify(imageSize);

const noop = () => {};

const validateOpts = declareOpts({
  projectRoots: {
    type: 'array',
    required: true,
  },
  blacklistRE: {
    type: 'object', // typeof regex is object
  },
  moduleFormat: {
    type: 'string',
    default: 'haste',
  },
  polyfillModuleNames: {
    type: 'array',
    default: [],
  },
  cacheVersion: {
    type: 'string',
    default: '1.0',
  },
  resetCache: {
    type: 'boolean',
    default: false,
  },
  transformModulePath: {
    type:'string',
    required: false,
  },
  nonPersistent: {
    type: 'boolean',
    default: false,
  },
  assetRoots: {
    type: 'array',
    required: false,
  },
  assetExts: {
    type: 'array',
    default: ['png'],
  },
  fileWatcher: {
    type: 'object',
    required: true,
  },
  assetServer: {
    type: 'object',
    required: true,
  },
  transformTimeoutInterval: {
    type: 'number',
    required: false,
  },
  silent: {
    type: 'boolean',
    default: false,
  },
});

class Bundler {

  constructor(options) {
    const opts = this._opts = validateOpts(options);

    opts.projectRoots.forEach(verifyRootExists);

    let mtime;
    try {
      ({mtime} = fs.statSync(opts.transformModulePath));
      mtime = String(mtime.getTime());
    } catch (error) {
      mtime = '';
    }

    const cacheKeyParts =  [
      'react-packager-cache',
      version,
      opts.cacheVersion,
      opts.projectRoots.join(',').split(path.sep).join('-'),
      mtime,
    ];

    this._getModuleId = createModuleIdFactory();

    if (opts.transformModulePath) {
      const transformer = require(opts.transformModulePath);
      if (typeof transformer.cacheKey !== 'undefined') {
        cacheKeyParts.push(transformer.cacheKey);
      }
    }

    this._cache = new Cache({
      resetCache: opts.resetCache,
      cacheKey: cacheKeyParts.join('$'),
    });

    this._transformer = new Transformer({
      transformModulePath: opts.transformModulePath,
    });

    this._resolver = new Resolver({
      projectRoots: opts.projectRoots,
      blacklistRE: opts.blacklistRE,
      polyfillModuleNames: opts.polyfillModuleNames,
      moduleFormat: opts.moduleFormat,
      assetRoots: opts.assetRoots,
      fileWatcher: opts.fileWatcher,
      assetExts: opts.assetExts,
      cache: this._cache,
      getModuleId: this._getModuleId,
      transformCode:
        (module, code, options) =>
          this._transformer.transformFile(module.path, code, options),
      minifyCode: this._transformer.minify,
    });

    this._projectRoots = opts.projectRoots;
    this._assetServer = opts.assetServer;

    if (opts.getTransformOptionsModulePath) {
      this._transformOptionsModule = require(
        opts.getTransformOptionsModulePath
      );
    }
  }

  kill() {
    this._transformer.kill();
    return this._cache.end();
  }

  bundle(options) {
    const {dev, minify, unbundle} = options;
    const moduleSystemDeps =
      this._resolver.getModuleSystemDependencies({dev, unbundle});
    return this._bundle({
      bundle: new Bundle({minify, sourceMapUrl: options.sourceMapUrl}),
      moduleSystemDeps,
      ...options,
    });
  }

  _sourceHMRURL(platform, path) {
    return this._hmrURL(
      '',
      platform,
      'bundle',
      path,
    );
  }

  _sourceMappingHMRURL(platform, path) {
    // Chrome expects `sourceURL` when eval'ing code
    return this._hmrURL(
      '\/\/# sourceURL=',
      platform,
      'map',
      path,
    );
  }

  _hmrURL(prefix, platform, extensionOverride, filePath) {
    const matchingRoot = this._projectRoots.find(root => filePath.startsWith(root));

    if (!matchingRoot) {
      throw new Error('No matching project root for ', filePath);
    }

    // Replaces '\' with '/' for Windows paths.
    if (path.sep === '\\') {
      filePath = filePath.replace(/\\/g, '/');
    }

    const extensionStart = filePath.lastIndexOf('.');
    let resource = filePath.substring(
      matchingRoot.length,
      extensionStart !== -1 ? extensionStart : undefined,
    );

    return (
      prefix + resource +
      '.' + extensionOverride + '?' +
      'platform=' + platform + '&runModule=false&entryModuleOnly=true&hot=true'
    );
  }

  hmrBundle(options, host, port) {
    return this._bundle({
      ...options,
      bundle: new HMRBundle({
        sourceURLFn: this._sourceHMRURL.bind(this, options.platform),
        sourceMappingURLFn: this._sourceMappingHMRURL.bind(
          this,
          options.platform,
        ),
      }),
      hot: true,
      dev: true,
    });
  }

  _bundle({
    bundle,
    entryFile,
    runModule: runMainModule,
    runBeforeMainModule,
    dev,
    minify,
    platform,
    moduleSystemDeps = [],
    hot,
    unbundle,
    entryModuleOnly,
    resolutionResponse,
    noframework,
    frameworkonly,
  }) {
    if (dev && runBeforeMainModule) { // no runBeforeMainModule for hmr bundles
      // `require` calls in the require polyfill itself are not extracted and
      // replaced with numeric module IDs, but the require polyfill
      // needs Systrace.
      // Therefore, we include the Systrace module before the main module, and
      // it will set itself as property on the require function.
      // TODO(davidaurelio) Scan polyfills for dependencies, too (t9759686)
      runBeforeMainModule = runBeforeMainModule.concat(['Systrace']);
    }

    const onResolutionResponse = response => {
      bundle.setMainModuleId(this._getModuleId(getMainModule(response)));
      if (bundle.setNumPrependedModules) {
        bundle.setNumPrependedModules(
          response.numPrependedDependencies + moduleSystemDeps.length
        );
      }
      if (entryModuleOnly) {
        response.dependencies = response.dependencies.filter(module =>
          module.path.endsWith(entryFile)
        );
      } else {
        response.dependencies = moduleSystemDeps.concat(response.dependencies);
        if (noframework || frameworkonly) {
          var presetModules = new Array(presetModuleList.length);
          var pluginModules = [];
          for (var i=0;i<response.dependencies.length;i++) {
            var item = response.dependencies[i];
            var contain = false;
            var x = item.path.indexOf("node_modules");
            if (x >= 0) {
              var rpath = item.path.substr(x);
              for (var j=0;j<presetModuleList.length;j++) {
                if (rpath == presetModuleList[j]) {
                  presetModules[j] = item;
                  contain = true;
                  break;
                }
              }
            }
            if (!contain) {
              pluginModules.push(item);
            }
          }
          var total = presetModules.concat(pluginModules);
          response.dependencies = total;
        }
      }
    };
    const finalizeBundle = ({bundle, transformedModules, response, modulesByName}) => {
      if (noframework)
      {
        transformedModules = transformedModules.filter((item) => {
          var contain = false;
          var x = item.module.path.indexOf("node_modules");
          if (x >= 0) {
            var rpath = item.module.path.substr(x);
            for (var j=0;j<presetModuleList.length;j++) {
              if (rpath == presetModuleList[j]) {
                contain = true;
                break;
              }
            }
          }
          return !contain;
        });        
      }
      else if (frameworkonly)
      {
        transformedModules = transformedModules.filter((item) => {
          var contain = false;
          var x = item.module.path.indexOf("node_modules");
          if (x >= 0) {
            var rpath = item.module.path.substr(x);
            for (var j=0;j<presetModuleList.length;j++) {
              if (rpath == presetModuleList[j]) {
                contain = true;
                break;
              }
            }
          }
          return contain;
        });
      }
      return Promise.all(
        transformedModules.map(({module, transformed}) =>
          bundle.addModule(this._resolver, response, module, transformed)
        )
      ).then(() => {
        const runBeforeMainModuleIds = Array.isArray(runBeforeMainModule)
          ? runBeforeMainModule
              .map(name => modulesByName[name])
              .filter(Boolean)
              .map(this._getModuleId, this)
          : undefined;

        bundle.finalize({
          runMainModule,
          runBeforeMainModule: runBeforeMainModuleIds,
        });
        return bundle;
      });
    }
    
    return this._buildBundle({
      entryFile,
      dev,
      minify,
      platform,
      bundle,
      hot,
      unbundle,
      resolutionResponse,
      onResolutionResponse,
      finalizeBundle,
    });
  }

  prepackBundle({
    entryFile,
    runModule: runMainModule,
    runBeforeMainModule,
    sourceMapUrl,
    dev,
    platform,
  }) {
    const onModuleTransformed = ({module, transformed, response, bundle}) => {
      const deps = Object.create(null);
      const pairs = response.getResolvedDependencyPairs(module);
      if (pairs) {
        pairs.forEach(pair => {
          deps[pair[0]] = pair[1].path;
        });
      }

      return module.getName().then(name => {
        bundle.addModule(name, transformed, deps, module.isPolyfill());
      });
    };
    const finalizeBundle = ({bundle, response}) => {
      const {mainModuleId} = response;
      bundle.finalize({runBeforeMainModule, runMainModule, mainModuleId});
      return bundle;
    };

    return this._buildBundle({
      entryFile,
      dev,
      platform,
      onModuleTransformed,
      finalizeBundle,
      minify: false,
      bundle: new PrepackBundle(sourceMapUrl),
    });
  }

  _buildBundle({
    entryFile,
    dev,
    minify,
    platform,
    bundle,
    hot,
    unbundle,
    resolutionResponse,
    onResolutionResponse = noop,
    onModuleTransformed = noop,
    finalizeBundle = noop,
  }) {
    const findEventId = Activity.startEvent('find dependencies');
    const modulesByName = Object.create(null);

    if (!resolutionResponse) {
      let onProgress = noop;
      if (process.stdout.isTTY && !this._opts.silent) {
        const bar = new ProgressBar(
          'transformed :current/:total (:percent)',
          {complete: '=', incomplete: ' ', width: 40, total: 1},
        );
        onProgress = (_, total) => {
          bar.total = total;
          bar.tick();
        };
      }

      resolutionResponse = this.getDependencies({
        entryFile,
        dev,
        platform,
        hot,
        onProgress,
        minify,
        generateSourceMaps: unbundle,
      });
    }

    return Promise.resolve(resolutionResponse).then(response => {
      Activity.endEvent(findEventId);
      onResolutionResponse(response);

      // get entry file complete path (`entryFile` is relative to roots)
      let entryFilePath;
      if (response.dependencies.length > 1) { // skip HMR requests
        const numModuleSystemDependencies =
          this._resolver.getModuleSystemDependencies({dev, unbundle}).length;


        const dependencyIndex = (response.numPrependedDependencies || 0) + numModuleSystemDependencies;
        if (dependencyIndex in response.dependencies) {
          entryFilePath = response.dependencies[dependencyIndex].path;
        }
      }

      const toModuleTransport = module =>
        this._toModuleTransport({
          module,
          bundle,
          entryFilePath,
          transformOptions: response.transformOptions,
        }).then(transformed => {
          modulesByName[transformed.name] = module;
          onModuleTransformed({
            module,
            response,
            bundle,
            transformed,
          });
          return {module, transformed};
        });

      return Promise.all(response.dependencies.map(toModuleTransport))
        .then(transformedModules =>
          Promise.resolve(
            finalizeBundle({bundle, transformedModules, response, modulesByName})
          ).then(() => bundle)
        );
    });
  }

  invalidateFile(filePath) {
    this._cache.invalidate(filePath);
  }

  getShallowDependencies({
    entryFile,
    platform,
    dev = true,
    minify = !dev,
    hot = false,
    generateSourceMaps = false,
  }) {
    return this.getTransformOptions(
      entryFile,
      {
        dev,
        platform,
        hot,
        generateSourceMaps,
        projectRoots: this._projectRoots,
      },
    ).then(transformSpecificOptions => {
      const transformOptions = {
        minify,
        dev,
        platform,
        transform: transformSpecificOptions,
      };

      return this._resolver.getShallowDependencies(entryFile, transformOptions);
    });
  }

  stat(filePath) {
    return this._resolver.stat(filePath);
  }

  getModuleForPath(entryFile) {
    return this._resolver.getModuleForPath(entryFile);
  }

  getDependencies({
    entryFile,
    platform,
    dev = true,
    minify = !dev,
    hot = false,
    recursive = true,
    generateSourceMaps = false,
    onProgress,
  }) {
    return this.getTransformOptions(
      entryFile,
      {
        dev,
        platform,
        hot,
        generateSourceMaps,
        projectRoots: this._projectRoots,
      },
    ).then(transformSpecificOptions => {
      const transformOptions = {
        minify,
        dev,
        platform,
        transform: transformSpecificOptions,
      };

      return this._resolver.getDependencies(
        entryFile,
        {dev, platform, recursive},
        transformOptions,
        onProgress,
      );
    });
  }

  getOrderedDependencyPaths({ entryFile, dev, platform }) {
    return this.getDependencies({entryFile, dev, platform}).then(
      ({ dependencies }) => {
        const ret = [];
        const promises = [];
        const placeHolder = {};
        dependencies.forEach(dep => {
          if (dep.isAsset()) {
            const relPath = getPathRelativeToRoot(
              this._projectRoots,
              dep.path
            );
            promises.push(
              this._assetServer.getAssetData(relPath, platform)
            );
            ret.push(placeHolder);
          } else {
            ret.push(dep.path);
          }
        });

        return Promise.all(promises).then(assetsData => {
          assetsData.forEach(({ files }) => {
            const index = ret.indexOf(placeHolder);
            ret.splice(index, 1, ...files);
          });
          return ret;
        });
      }
    );
  }

  _toModuleTransport({module, bundle, entryFilePath, transformOptions}) {
    let moduleTransport;
    if (module.isAsset_DEPRECATED()) {
      moduleTransport = this._generateAssetModule_DEPRECATED(bundle, module);
    } else if (module.isAsset()) {
      moduleTransport = this._generateAssetModule(
        bundle, module, transformOptions.platform);
    }

    if (moduleTransport) {
      return Promise.resolve(moduleTransport);
    }

    return Promise.all([
      module.getName(),
      module.read(transformOptions),
    ]).then((
      [name, {code, dependencies, dependencyOffsets, map, source}]
    ) => {
      const preloaded =
        module.path === entryFilePath ||
        module.isPolyfill() || (
          transformOptions.transform.preloadedModules &&
          transformOptions.transform.preloadedModules.hasOwnProperty(module.path)
        );

      return new ModuleTransport({
        name,
        id: this._getModuleId(module),
        code,
        map,
        meta: {dependencies, dependencyOffsets, preloaded},
        sourceCode: source,
        sourcePath: module.path
      })
    });
  }

  getGraphDebugInfo() {
    return this._resolver.getDebugInfo();
  }

  _generateAssetModule_DEPRECATED(bundle, module) {
    return Promise.all([
      sizeOf(module.path),
      module.getName(),
    ]).then(([dimensions, id]) => {
      const img = {
        __packager_asset: true,
        path: module.path,
        uri: id.replace(/^[^!]+!/, ''),
        width: dimensions.width / module.resolution,
        height: dimensions.height / module.resolution,
        deprecated: true,
      };

      bundle.addAsset(img);

      const code = 'module.exports=' + JSON.stringify(img) + ';';

      return new ModuleTransport({
        name: id,
        id: this._getModuleId(module),
        code: code,
        sourceCode: code,
        sourcePath: module.path,
        virtual: true,
      });
    });
  }

  _generateAssetObjAndCode(module, platform = null) {
    const relPath = getPathRelativeToRoot(this._projectRoots, module.path);
    var assetUrlPath = path.join('/assets', path.dirname(relPath));

    // On Windows, change backslashes to slashes to get proper URL path from file path.
    if (path.sep === '\\') {
      assetUrlPath = assetUrlPath.replace(/\\/g, '/');
    }

    // Test extension against all types supported by image-size module.
    // If it's not one of these, we won't treat it as an image.
    let isImage = [
      'png', 'jpg', 'jpeg', 'bmp', 'gif', 'webp', 'psd', 'svg', 'tiff'
    ].indexOf(path.extname(module.path).slice(1)) !== -1;

    return Promise.all([
      isImage ? sizeOf(module.path) : null,
      this._assetServer.getAssetData(relPath, platform),
    ]).then(function(res) {
      const dimensions = res[0];
      const assetData = res[1];
      const asset = {
        __packager_asset: true,
        fileSystemLocation: path.dirname(module.path),
        httpServerLocation: assetUrlPath,
        width: dimensions ? dimensions.width / module.resolution : undefined,
        height: dimensions ? dimensions.height / module.resolution : undefined,
        scales: assetData.scales,
        files: assetData.files,
        hash: assetData.hash,
        name: assetData.name,
        type: assetData.type,
      };

      const json = JSON.stringify(asset);
      const assetRegistryPath = 'react-native/Libraries/Image/AssetRegistry';
      const code =
        `module.exports = require(${JSON.stringify(assetRegistryPath)}).registerAsset(${json});`;
      const dependencies = [assetRegistryPath];
      const dependencyOffsets = [code.indexOf(assetRegistryPath) - 1];

      return {
        asset,
        code,
        meta: {dependencies, dependencyOffsets}
      };
    });
  }


  _generateAssetModule(bundle, module, platform = null) {
    return Promise.all([
      module.getName(),
      this._generateAssetObjAndCode(module, platform),
    ]).then(([name, {asset, code, meta}]) => {
      bundle.addAsset(asset);
      return new ModuleTransport({
        name,
        id: this._getModuleId(module),
        code,
        meta: meta,
        sourceCode: code,
        sourcePath: module.path,
        virtual: true,
      });
    });
  }

  getTransformOptions(mainModuleName, options) {
    const extraOptions = this._transformOptionsModule
      ? this._transformOptionsModule(mainModuleName, options, this)
      : null;
    return Promise.resolve(extraOptions)
      .then(extraOptions => Object.assign(options, extraOptions));
  }
}

function getPathRelativeToRoot(roots, absPath) {
  for (let i = 0; i < roots.length; i++) {
    const relPath = path.relative(roots[i], absPath);
    if (relPath[0] !== '.') {
      return relPath;
    }
  }

  throw new Error(
    'Expected root module to be relative to one of the project roots'
  );
}

function verifyRootExists(root) {
  // Verify that the root exists.
  assert(fs.statSync(root).isDirectory(), 'Root has to be a valid directory');
}

function createModuleIdFactory() {
  const fileToIdMap = Object.create(null);
  let nextId = 0;
  return ({path}) => {
    if (!(path in fileToIdMap)) {
      fileToIdMap[path] = nextId;
      nextId += 1;
    }
    return fileToIdMap[path];
  };
}

function getMainModule({dependencies, numPrependedDependencies = 0}) {
  return dependencies[numPrependedDependencies];
}

module.exports = Bundler;
