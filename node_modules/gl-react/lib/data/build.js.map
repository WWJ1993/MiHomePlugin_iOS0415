{"version":3,"sources":["../../src/data/build.js"],"names":[],"mappings":";;;;;;AAQA;;;;;;;;AARA,IAAM,QAAQ,QAAQ,OAAR,CAAR;AACN,IAAM,YAAY,QAAQ,WAAR,CAAZ;AACN,IAAM,UAAU,QAAQ,YAAR,CAAV;AACN,IAAM,UAAU,QAAQ,YAAR,CAAV;AACN,IAAM,iBAAiB,QAAQ,kBAAR,CAAjB;AACN,IAAM,uBAAuB,QAAQ,wBAAR,CAAvB;AACN,IAAM,kCAAkC,QAAQ,mCAAR,CAAlC;AACN,IAAM,0BAA0B,QAAQ,2BAAR,CAA1B;;;;;AAKN,OAAO,OAAP,GAAiB,SAAS,KAAT,CACf,MADe,EAEf,OAFe,EAGf,aAHe,EAIf,GAJe,EAKf,SALe,EAMf,uBANe,EAOf;AACA,MAAM,QAAQ,OAAO,KAAP,CADd;AAEA,MAAM,SAAS,QAAQ,QAAR,CAAiB,MAAM,MAAN,EAAc,SAA/B,EAA0C,wBAAwB,MAAM,eAAN,CAAlE,CAAT,CAFN;AAGA,MAAM,iBAAiB,MAAM,QAAN,CAHvB;;oCAQS,SAAY,OARrB;;MAKE,6BALF;MAME,+BANF;MAOE,uCAPF;;AASA,MAAM,aAAa;AACjB,gBADiB;AAEjB,kBAFiB;AAGjB,0BAHiB;GAAb,CATN;AAcA,MAAM,iBAAiB,MAAM,QAAN,CAdvB;AAeA,MAAM,UAAU,aAAa,KAAb,GAAqB,MAAM,OAAN,GAAgB,aAArC,CAfhB;;AAiBA,YAAU,QAAQ,MAAR,CAAe,MAAf,CAAV,EAAkC,4BAAlC,EAAgE,MAAhE,EAjBA;;AAmBA,MAAM,aAAa,QAAQ,GAAR,CAAY,MAAZ,EAAoB,IAApB,CAnBnB;AAoBA,0BAAwB,UAAxB,EAAoC,mBAAiB,UAAjB,GAA4B,oBAA5B,CAApC,CApBA;;AAsBA,MAAM,wBAAgB,eAAhB,CAtBN;AAuBA,MAAM,WAAW,EAAX,CAvBN;AAwBA,MAAM,WAAW,EAAX,CAxBN;;AA0BA,QAAM,QAAN,CAAe,OAAf,CAAuB,cAAvB,EAAuC,iBAAS;AAC9C,cAAU,MAAM,IAAN,KAAe,OAAf,EAAwB,+EAAlC,EAAmH,UAAnH,EAA+H,MAAM,IAAN,IAAc,MAAM,IAAN,CAAW,WAAX,IAA0B,KAAxC,CAA/H,CAD8C;uBAEV,MAAM,KAAN,CAFU;QAEtC,yBAFsC;QAEhC,iCAFgC;;QAEnB,oEAFmB;;AAG9C,cAAU,OAAO,IAAP,KAAgB,QAAhB,IAA4B,IAA5B,EAAkC,qDAA5C,EAAmG,UAAnG,EAH8C;AAI9C,cAAU,CAAC,cAAD,IAAmB,EAAE,QAAQ,cAAR,CAAF,EAA2B,kFAAxD,EAA4I,UAA5I,EAJ8C;AAK9C,cAAU,EAAE,QAAQ,QAAR,CAAF,EAAqB,4FAA/B,EAA6H,UAA7H,EAL8C;AAM9C,aAAS,IAAT,IAAiB,CAAC,QAAD,IAAa,SAAS,KAAT,GAAiB,QAA9B,GAAyC,EAAE,OAAO,QAAP,EAAiB,UAAnB,EAAzC;AAN6B,GAAT,CAAvC,CA1BA;;AAmCA,SAAO,IAAP,CAAY,QAAZ,EAAsB,OAAtB,CAA8B,gBAAQ;AACpC,QAAI,QAAQ,SAAS,IAAT,CAAR;QAAwB,aAA5B,CADoC;AAEpC,QAAI,SAAS,QAAO,qDAAP,KAAiB,QAAjB,IAA6B,CAAC,MAAM,SAAN,IAAmB,WAAW,KAAX,EAAkB;;AAE9E,UAAI,QAAO,MAAM,IAAN,CAAP,KAAsB,QAAtB,EAAgC;AAClC,eAAO,MAAM,IAAN,CAD2B;OAApC;AAGA,cAAQ,MAAM,KAAN,CALsE;KAAhF;;AAQA,YAAQ,kBAAQ,oBAAR,CAA6B,KAA7B,CAAR,CAVoC;;AAYpC,QAAI;AACF,cAAQ,qBAAqB,KAArB,CAAR;;AAEA,aAAK,QAAL;;AACE,mBAAS,IAAT,IAAiB,eAAe,QAAf,CAAwB,eAAe,GAAf,CAAmB,EAAE,KAAK,KAAL,EAArB,CAAxB,EAA4D,IAA5D,CAAjB,CADF;AAEE,gBAFF;;AAFA,aAMK,OAAL;;AACE,mBAAS,IAAT,IAAiB,eAAe,QAAf,CAAwB,eAAe,GAAf,CAAmB,KAAnB,CAAxB,EAAmD,IAAnD,CAAjB,CADF;AAEE,gBAFF;;AANA,aAUK,SAAL;AACE,mBAAS,IAAT,IAAiB,eAAe,QAAf,CAAwB,eAAe,OAAf,CAAuB,KAAvB,CAAxB,EAAuD,IAAvD,CAAjB,CADF;AAEE,gBAFF;;AAVA,aAcK,QAAL,CAdA;AAeA,aAAK,MAAL;AAAa;AACX,gBAAM,MAAM,gCAAgC,KAAhC,EAAuC,UAAvC,CAAN,CADK;AAEX,gBAAI,GAAJ,EAAS;kBACC,cAA8B,IAA9B,YADD;kBACc,OAAiB,IAAjB,IADd;kBACmB,WAAY,IAAZ;;AADnB;AAGP,uBAAS,IAAT,CAAc;AACZ,sBAAM,KAAN;AACA,yBAAS,IAAT;AACA,sBAAM,MAAM,WAAN,EAAmB,QAAnB,EAA4B,OAA5B,EAAqC,IAArC,EAA0C,SAA1C,EAAqD,uBAArD,CAAN;eAHF,EAHO;aAAT,MASK;;AAEH,uBAAS,IAAT,CAAc;AACZ,sBAAM,KAAN;AACA,yBAAS,IAAT;AACA,0BAHY;eAAd,EAFG;aATL;AAiBA,kBAnBW;WAAb;;AAfA;;AAuCE,mBAAS,IAAT,IAAiB,KAAjB,CAFF;AArCA,OADE;KAAJ,CA2CA,OAAO,CAAP,EAAU;AACR,aAAO,SAAS,IAAT,CAAP,CADQ;AAER,UAAM,UAAU,aAAW,UAAX,GAAsB,cAAtB,GAAqC,IAArC,GAA0C,IAA1C,GAA+C,EAAE,OAAF,CAFvD;AAGR,UAAI,QAAQ,GAAR,CAAY,QAAZ,KAAyB,YAAzB,EACF,QAAQ,KAAR,CAAc,OAAd,EAAuB,KAAvB,EADF;AAHQ,YAKF,IAAI,KAAJ,CAAU,OAAV,CAAN,CALQ;KAAV;GAvD4B,CAA9B,CAnCA;;AAmGA,SAAO;AACL,kBADK;AAEL,sBAFK;AAGL,gBAHK;AAIL,kBAJK;AAKL,0BALK;AAML,sBANK;AAOL,sBAPK;AAQL,oBARK;AASL,YATK;GAAP,CAnGA;CAPe","file":"build.js","sourcesContent":["const React = require(\"react\");\nconst invariant = require(\"invariant\");\nconst Uniform = require(\"../Uniform\");\nconst Shaders = require(\"../Shaders\");\nconst TextureObjects = require(\"./TextureObjects\");\nconst duckTypeUniformValue = require(\"./duckTypeUniformValue\");\nconst findGLNodeInGLComponentChildren = require(\"./findGLNodeInGLComponentChildren\");\nconst invariantStrictPositive = require(\"./invariantStrictPositive\");\nimport runtime from \"../runtime\";\n\n//// build: converts the gl-react VDOM DSL into an internal data tree.\n\nmodule.exports = function build (\n  glNode,\n  context,\n  parentPreload,\n  via,\n  surfaceId,\n  decorateOnShaderCompile\n) {\n  const props = glNode.props;\n  const shader = Shaders._resolve(props.shader, surfaceId, decorateOnShaderCompile(props.onShaderCompile));\n  const glNodeUniforms = props.uniforms;\n  const {\n    width,\n    height,\n    pixelRatio\n  } = { ...context, ...props };\n  const newContext = {\n    width,\n    height,\n    pixelRatio\n  };\n  const glNodeChildren = props.children;\n  const preload = \"preload\" in props ? props.preload : parentPreload;\n\n  invariant(Shaders.exists(shader), \"Shader #%s does not exists\", shader);\n\n  const shaderName = Shaders.get(shader).name;\n  invariantStrictPositive(pixelRatio, \"GL Component (\"+shaderName+\"). pixelRatio prop\");\n\n  const uniforms = { ...glNodeUniforms };\n  const children = [];\n  const contents = [];\n\n  React.Children.forEach(glNodeChildren, child => {\n    invariant(child.type === Uniform, \"(Shader '%s') GL.Node can only contains children of type GL.Uniform. Got '%s'\", shaderName, child.type && child.type.displayName || child);\n    const { name, children, ...opts } = child.props;\n    invariant(typeof name === \"string\" && name, \"(Shader '%s') GL.Uniform must define an name String\", shaderName);\n    invariant(!glNodeUniforms || !(name in glNodeUniforms), \"(Shader '%s') The uniform '%s' set by GL.Uniform must not be in {uniforms} props\", shaderName);\n    invariant(!(name in uniforms), \"(Shader '%s') The uniform '%s' set by GL.Uniform must not be defined in another GL.Uniform\", shaderName);\n    uniforms[name] = !children || children.value ? children : { value: children, opts }; // eslint-disable-line no-undef\n  });\n\n  Object.keys(uniforms).forEach(name => {\n    let value = uniforms[name], opts;\n    if (value && typeof value === \"object\" && !value.prototype && \"value\" in value) {\n      // if value has a value field, we tread this field as the value, but keep opts in memory if provided\n      if (typeof value.opts === \"object\") {\n        opts = value.opts;\n      }\n      value = value.value;\n    }\n\n    value = runtime.decorateUniformValue(value);\n\n    try {\n      switch (duckTypeUniformValue(value)) {\n\n      case \"string\": // uri specified as a string\n        uniforms[name] = TextureObjects.withOpts(TextureObjects.URI({ uri: value }), opts);\n        break;\n\n      case \"{uri}\": // uri specified in an object, we keep all other fields for RN \"local\" image use-case\n        uniforms[name] = TextureObjects.withOpts(TextureObjects.URI(value), opts);\n        break;\n\n      case \"ndarray\":\n        uniforms[name] = TextureObjects.withOpts(TextureObjects.NDArray(value), opts);\n        break;\n\n      case \"vdom[]\":\n      case \"vdom\": {\n        const res = findGLNodeInGLComponentChildren(value, newContext);\n        if (res) {\n          const { childGLNode, via, context } = res;\n          // We have found a GL.Node children, we integrate it in the tree and recursively do the same\n          children.push({\n            vdom: value,\n            uniform: name,\n            data: build(childGLNode, context, preload, via, surfaceId, decorateOnShaderCompile)\n          });\n        }\n        else {\n          // in other cases VDOM, we will use child as a content\n          contents.push({\n            vdom: value,\n            uniform: name,\n            opts\n          });\n        }\n        break;\n      }\n\n      default:\n        // Remaining cases will just set the value without further transformation\n        uniforms[name] = value;\n      }\n    }\n    catch (e) {\n      delete uniforms[name];\n      const message = \"Shader '\"+shaderName+\"': uniform '\"+name+\"' \"+e.message;\n      if (process.env.NODE_ENV !== \"production\")\n        console.error(message, value); // eslint-disable-line no-console\n      throw new Error(message);\n    }\n  });\n\n  return {\n    shader,\n    uniforms,\n    width,\n    height,\n    pixelRatio,\n    children,\n    contents,\n    preload,\n    via\n  };\n};\n"]}